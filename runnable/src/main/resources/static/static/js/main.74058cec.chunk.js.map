{"version":3,"sources":["Componenti/GestFid/constants.js","Componenti/GestFid/Services/authService.js","Componenti/GestFid/Errors/HandleError.js","Componenti/GestFid/Login/LoginComponent.jsx","Componenti/GestFid/Logout/LogoutComponent.jsx","Componenti/GestFid/Signup/SignupComponent.jsx","Componenti/GestFid/Welcome/Welcome.jsx","Componenti/GestFid/Services/Api/Clienti/ClientiAPI.js","Componenti/GestFid/Clienti/Clienti.jsx","Componenti/GestFid/Services/Api/Companies/CompaniesAPI.js","Componenti/GestFid/Companies/Companies.jsx","Componenti/GestFid/Login/AlertsExpired.jsx","Componenti/GestFid/AuthRoute.jsx","Componenti/GestFid/Clienti/InsClienti/DatiCliente.jsx","Componenti/GestFid/Companies/InsCompany/SelectField.js","Componenti/GestFid/Companies/InsCompany/CompanyData.jsx","Componenti/GestFid/Header/HeaderComponent.jsx","Componenti/GestFid/Footer/FooterComponent.jsx","Componenti/GestFid/Forbidden/ForbComponent.jsx","Componenti/GestFid/GestFidApp.jsx","App.js","serviceWorker.js","index.js"],"names":["TOKEN_COOKIE","REMEMBER_COOKIE","TIME","DOMAIN","state","Server","Constants","refreshToken","axios","get","JWTAuthServer","username","password","rememberMe","method","url","data","getUserInfo","token","jwt","decode","getTokenFromCookie","undefined","sub","e","console","log","isLogged","index","cookies","document","cookie","split","cookieName","i","length","trim","indexOf","signUp","utente","post","getAllUsers","getAllRoles","sessionStorage","getItem","indexR","setItem","ex","handleError","obj","error","response","status","setState","ErrMsg","ErrWebApi","message","LoginComponent","userId","noLogged","componentDidMount","AuthenticationService","Login","event","preventDefault","then","props","history","push","catch","HandleError","GestMod","target","type","name","checked","value","this","id","className","onSubmit","src","alt","width","height","htmlFor","defaultValue","onChange","required","autoFocus","to","Component","LogoutComponent","SignupComponent","email","okMsg","Salva","values","roles","window","confirm","Valida","errors","initialValues","enableReinitialize","validate","validateOnChange","validateOnBlur","style","component","onClick","WelcomeComponent","match","params","BaseURL","getAllClientiData","getClientiByCode","codfid","delClienteByCode","delete","insCliente","cliente","Clienti","clienti","CodFid","NumCli","OkMsg","CercaTutti","ClientiService","handleResponse","ResetValue","Cerca","Elimina","Modifica","Inserisci","concat","DatatablePage","c","buttonDelete","size","buttonEdit","map","cards","nominativo","bollini","ultimaspesa","edit","columns","label","field","sort","rows","margin","tag","ErrWebApiMsg","btn","striped","bordered","hover","entriesOptions","entries","display","role","getAllCompaniesData","getCompanyById","delCompanyById","insCompany","company","searchUsersToInvite","companyId","inviteUsers","parameters","Companies","companies","NumCom","CercaTutte","CompaniesService","sector","address","addressLineOne","city","cap","province","hourSeconds","timerProps","isPlaying","strokeWidth","secondsDim","minutesDim","min","sec","renderTime","dimension","remainingTime","getElementById","remove","innerHTML","elements","getElementsByClassName","parentNode","removeChild","removeElementsByClass","AlertsExpired","useState","show","setShow","diff","time","position","zIndex","top","textAlign","Alert","variant","onClose","click","dismissible","Heading","colors","duration","initialRemainingTime","onComplete","totalElapsedTime","elapsedTime","getTimeMinutes","getTimeSeconds","Button","href","exp","now","AuthRoute","setVariablesByCookie","loopIfExpired","Date","getTime","timer","setInterval","checkIfExpired","Hello","createReactClass","render","constants","temp","createElement","ReactDOM","container","querySelector","appendChild","clearInterval","setupAxiosInterceptors","tokenB","interceptors","request","use","config","headers","authorization","err","Promise","reject","ruoli","myRole","check","forEach","authority","DatiClienteComponent","indirizzo","comune","prov","telefono","mail","attivo","Annulla","as","SelectField","handleChange","handleBlur","onBlur","placeholder","options","isMulti","isClearable","backspaceRemovesValue","components","ClearIndicator","CompanyDataComponent","logo","ownerId","addressLineTwo","country","legalName","Msg","users","utenti","handleSubmit","resetForm","setSubmitting","user","setFieldValue","HeaderComponent","withRouter","Menu","rel","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","Search","User","UserInfo","FooterComponent","Footer","ForbComponent","GestFidApp","Basic","Admin","Editor","path","exact","NotFound","App","Boolean","location","hostname","StrictMode","firstCheckIsLogged","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74058cec.chunk.js","sourcesContent":["/* COSTANTI */\r\n\r\nexport const TOKEN_COOKIE = \"token\";\r\nexport const REMEMBER_COOKIE = \"rememberMe\";\r\n\r\n//Tempo che si vuole lasciare all'utente per rinnovare il token\r\nexport const TIME = 15 * 60 * 1000;\r\n\r\nexport const DOMAIN = \"http://192.168.1.107:8080\";\r\n//export const DOMAIN = \"http://localhost:8080\";\r\n\r\nexport default null;","import axios from \"axios\";\r\nimport jwt from \"jsonwebtoken\"\r\nimport * as Constants from \"../constants\";\r\n\r\n//Funzionalità varie per quanto riguarda il login, l'autenticazione e la comunicazione con le API riguardanti gli utenti.\r\nclass AuthenticationService {\r\n\r\n    state = {\r\n        Server: Constants.DOMAIN\r\n    }\r\n\r\n    //Aggiorna il token di accesso\r\n    refreshToken = () => {\r\n        return axios.get(`${this.state.Server}/api/auth/refresh-token`);\r\n    }\r\n\r\n    //Con l'autenticazione JWT i parametri non vengono passati con un header ma attraverso il body\r\n    JWTAuthServer = (username, password, rememberMe) => {\r\n        return axios({\r\n            method: 'post', //you can set what request you want to be\r\n            url: `${this.state.Server}/api/auth/signin`,\r\n            data: {\r\n                username: username,\r\n                password: password,\r\n                rememberMe: rememberMe\r\n            }\r\n        })\r\n    }\r\n\r\n    //Funzione per ottenere l'username dell'utente loggato\r\n    getUserInfo = () => {\r\n        try {\r\n            let token = jwt.decode(this.getTokenFromCookie());\r\n            if (token !== null && token !== undefined)\r\n                return token.sub;\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    //Funzione per verificare se l'utente è loggato\r\n    isLogged = () => {\r\n\r\n        let user = this.getUserInfo();\r\n\r\n        if (user === null)\r\n            return false;\r\n        else\r\n            return true;\r\n\r\n    }\r\n\r\n    //Funcione per ottenere il token JWT dal relativo cookie\r\n    getTokenFromCookie = () => {\r\n        try {\r\n            let cookies = document.cookie.split(';');//contains all the cookies\r\n            let cookieName = []; // to contain name of all the cookies\r\n            let index = -1;\r\n            let token;\r\n\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                cookieName[i] = cookies[i].split('=')[0].trim();\r\n            }\r\n            index = cookieName.indexOf(Constants.TOKEN_COOKIE);\r\n\r\n            if (index > -1) {\r\n                token = cookies[index].split(/=(.+)/)[1];\r\n                return token;\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n    //Funzione fondamentale.\r\n    //Viene chiamata subito all'avvio dell'app da index.js per verificare se l'utente è loggato.\r\n    //Nel caso sia loggato controlla se vuole essere ricordato e altrimenti cancella i cookies\r\n    firstCheckIsLogged() {\r\n        try {\r\n            if (sessionStorage.getItem(\"isChecked\") === null || !sessionStorage.getItem(\"isChecked\")) {\r\n                let cookies = document.cookie.split(';');//contains all the cookies\r\n                let cookieName = []; // to contain name of all the cookies\r\n                let indexR = -1, indexT = -1;\r\n\r\n                for (let i = 0; i < cookies.length; i++) {\r\n                    cookieName[i] = cookies[i].split('=')[0].trim();\r\n                }\r\n                indexR = cookieName.indexOf(Constants.REMEMBER_COOKIE);\r\n                indexT = cookieName.indexOf(Constants.TOKEN_COOKIE);\r\n\r\n                //Se esiste il cookie con il token e il cookie remember me ed è true\r\n                if (indexT <= -1 || indexR <= -1 || cookies[indexR].split(/=(.+)/)[1] !== \"true\") {\r\n                    document.cookie = Constants.REMEMBER_COOKIE + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\r\n                    document.cookie = Constants.TOKEN_COOKIE + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\r\n                }\r\n                sessionStorage.setItem(\"isChecked\", true);\r\n            }\r\n        } catch (ex) {\r\n            sessionStorage.setItem(\"isChecked\", false);\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    signUp = (utente) => {\r\n        return axios.post(`${this.state.Server}/api/auth/signup`, utente);\r\n    }\r\n\r\n    getAllUsers = () =>{\r\n        return axios.get(`${this.state.Server}/api/auth/getAll`);\r\n    }\r\n\r\n    getAllRoles = () =>{\r\n        return axios.get(`${this.state.Server}/api/auth/getAllRoles`);\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthenticationService();","//File per la gestione di alcuni errori\r\n\r\n//Classe per ritornare un messaggio di errore personalizzato in base al codice dell'errore.\r\nclass HandleError {\r\n\r\n    handleError = (obj, error) => {\r\n        if (error.response.status === 403) {\r\n            obj.setState({\r\n                ErrMsg: \"Non hai il permesso di eseguire questa funzionaltà\",\r\n                ErrWebApi: true\r\n            })\r\n        } else {\r\n            obj.setState({\r\n                ErrMsg: error.response.data.message,\r\n                ErrWebApi: true\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default new HandleError();","import React, { Component } from \"react\";\r\nimport \"./LoginComponent.css\";\r\nimport { Redirect, Link } from \"react-router-dom\"\r\nimport AuthenticationService from '../Services/authService.js';\r\nimport HandleError from \"../Errors/HandleError.js\"\r\n\r\n//Classe per la pagina di login\r\nexport default class LoginComponent extends Component {\r\n\r\n    state = {\r\n        userId: 'Roberto',\r\n        password: '123Stella',\r\n        rememberMe: false,\r\n        isLogged: false,\r\n        noLogged: false,\r\n        username: null,\r\n        token: null,\r\n        ErrMsg: null\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        try {\r\n            this.setState({\r\n                token: AuthenticationService.getTokenFromCookie(),\r\n\t\t\t    username: AuthenticationService.getUserInfo()\r\n            });\t\t\t\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n    }\r\n\r\n    //Form di login\r\n    render() {\r\n\r\n        if (this.state.token === null || this.state.username === null || this.state.token === '' || this.state.username === '') {\r\n            \r\n            return (\r\n\r\n                <div>\r\n                    <p>Accedi all'App GestFid</p>\r\n                    <section id=\"logInSection\">\r\n                        <form className=\"form-signin\" onSubmit={this.Login}>\r\n                            <img className=\"mb-4\" src=\"https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg\" alt=\"\" width=\"72\" height=\"72\" />\r\n                            <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n\r\n                            {this.state.ErrMsg && <div className=\"alert alert-danger\"><h5>{this.state.ErrMsg}</h5></div>}\r\n\r\n                            <label htmlFor=\"userId\" className=\"sr-only\">Email address</label>\r\n                            <input type=\"text\" id=\"userId\" name=\"userId\" className=\"form-control\" defaultValue={this.state.userId} onChange={this.GestMod} required autoFocus />\r\n\r\n                            <label htmlFor=\"password\" className=\"sr-only\">Password</label>\r\n                            <input type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" defaultValue={this.state.password} onChange={this.GestMod} required />\r\n\r\n                            <div className=\"checkbox mb-3\">\r\n                                <label>\r\n                                    <input id=\"rememberMe\" name=\"rememberMe\" type=\"checkbox\" onChange={this.GestMod} /> Remember me\r\n                            </label>\r\n                            </div>\r\n                            <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Accedi</button>\r\n                            <hr/>\r\n                            <Link className=\"btn btn-md btn-warning btn-block\" to=\"/signup\" type=\"button\">Signup</Link>\r\n                            <p className=\"mt-5 mb-3 text-muted\">&copy; 2017-2018</p>\r\n                        </form>\r\n                    </section>\r\n\r\n                </div>\r\n\r\n            );\r\n        } else {\r\n            return <Redirect to={\"/welcome/\" + this.state.username} />\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    //Metodo per il login.\r\n    Login = (event) => {\r\n        event.preventDefault(); //Importante percè essendo il login una form, evita che premendo invio la pagina si refreshi.\r\n\r\n        //Chiamo la funzione che contatta l'api backend per il login e la generazione del token JWT\r\n        AuthenticationService.JWTAuthServer(this.state.userId, this.state.password, this.state.rememberMe)\r\n            .then((response) => {\r\n                //Non serve fare altro perchè l'API crea un cookie\r\n                this.props.history.push(`/welcome/${this.state.userId}`); //Reindirizzo nella pagina di welcome\r\n            })\r\n            .catch((error) => {\r\n                HandleError.handleError(this, error)\r\n                //Resetto le variabili dello state se trovo un problema\r\n                this.setState({\r\n                    isLogged: false,\r\n                    noLogged: true\r\n                })\r\n            })\r\n    }\r\n\r\n    //Metodo che aggiorna le variabili dello state quando vengono modificati i dati all'interno della form\r\n    GestMod = (event) => {\r\n\r\n        if (event.target.type === \"checkbox\") {\r\n            this.setState({\r\n                [event.target.name]: event.target.checked\r\n            })\r\n        } else if (event.target.type === \"text\" || event.target.type === \"password\") {\r\n            this.setState({\r\n                [event.target.name]: event.target.value\r\n            })\r\n        } else {\r\n            console.log(event.target.type + \" -> \" + event.target.name + \": \" + event.target.value);\r\n        }\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport \"./LogoutComponent.css\";\r\nimport * as Constants from \"../constants\";\r\nimport { instanceOf } from 'prop-types';\r\n\r\n//Classe per la funzionalità di logout\r\nexport default class LogoutComponent extends Component {\r\n\r\n    render() {\r\n\r\n        document.cookie = Constants.TOKEN_COOKIE + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\r\n        document.cookie = Constants.REMEMBER_COOKIE + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\r\n        this.props.history.push(`/login`); //Reindirizzo nella pagina di login\r\n        return null;\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport HandleError from \"../Errors/HandleError.js\"\r\nimport AuthenticationService from '../Services/authService.js';\r\n\r\nexport default class SignupComponent extends Component {\r\n\r\n    state = {\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        okMsg: null,\r\n        ErrMsg: null\r\n    }\r\n\r\n    //Gestisco le risposte positive.\r\n    //Le risposte negative vengono gestite da handleError.js nella cartella Errors\r\n    handleResponse(response) {\r\n\r\n        this.setState({\r\n            username: response.data.username,\r\n            email: response.data.email,\r\n            password: response.data.password,\r\n            okMsg: null\r\n        })\r\n\r\n    }\r\n\r\n    //Metodo per salvare il nuovo o aggiornare uno esistente\r\n    Salva = (values) => {\r\n\r\n        var role = [\"user\"];\r\n        /*console.log(\"username: \"+ values.username);\r\n        console.log(\"email: \"+ values.email);\r\n        console.log(\"password: \"+ values.password);\r\n        console.log(\"roles: %O\", mySet);*/\r\n\r\n        AuthenticationService.signUp({\r\n            username: values.username,\r\n            email: values.email,\r\n            password: values.password,\r\n            roles: role\r\n        })\r\n            .then(\r\n                () => {\r\n                    this.setState({ okMsg: 'Inserimento dati eseguito con successo' });\r\n                    this.props.history.push(`/login`);\r\n                }\r\n            )\r\n            .catch(error => HandleError.handleError(this, error));\r\n    }\r\n\r\n    //Metodo per annullare le modifiche e ritornare al login\r\n    Login = () => {\r\n        if (window.confirm(\"Vuoi tornare al login?\")) {\r\n            this.props.history.push(`/login`);\r\n        }\r\n    }\r\n\r\n    //Metodo per validare i dati inseriti nella FORM\r\n    Valida = (values) => {\r\n        let errors = {}\r\n\r\n        if (!values.username) {\r\n            errors.username = \"Inserisci un username\"\r\n        }\r\n        else if (values.username.length < 6) {\r\n            errors.username = \"L'username deve avere almeno 6 caratteri\"\r\n        }\r\n\r\n        if (!values.email) {\r\n            errors.email = \"Inserisci un'email valida\"\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = \"Inserisci una password\"\r\n        }\r\n        else if (values.password.length < 6) {\r\n            errors.password = \"La password deve avere almeno 6 caratteri\"\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    render() {\r\n\r\n        //Imposto il valore dei campi della form con quelli salvati nello state. ATTENZIONE, questi nomi devo essere uguali a quelli dello state.\r\n        let { username, email, password } = this.state;\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h3 className=\"card-title mb-4\">Signup</h3>\r\n\r\n                        <Formik\r\n                            //Inizio della FORM. Per crearla utilizzo FORMIK\r\n                            //Imposto i valori iniziali. ATTENZIONE, questi nomi devono essere uguali a quelli dell'id dei campi della form\r\n                            initialValues={{ username, email, password }}\r\n\r\n                            //Nel submit della FORM chiamo il metodo salva\r\n                            onSubmit={this.Salva}\r\n\r\n                            //Con questa proprietà i parametri vengono inizializzati all'avvio\r\n                            enableReinitialize={true}\r\n\r\n                            //Valido i valori\r\n                            validate={this.Valida}\r\n\r\n                            //Con queste due proprietà, la form verrà validata solamente quando si preme il tasto salva, altrimenti verrebbe validata fin da subito\r\n                            validateOnChange={false}\r\n                            validateOnBlur={false}\r\n                        >\r\n\r\n                            {\r\n\r\n                                (props) => (\r\n\r\n                                    <Form>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <img style={{ width: \"100px\", \"marginBottom\": \"2rem\" }} src={`../logo.png`} className=\"img-sm rounded-circle border\" alt=\"imgcli\" />\r\n                                        </div>\r\n\r\n                                        {this.state.okMsg && <div className=\"alert alert-success\"><h5>{this.state.okMsg}</h5></div>}\r\n                                        {this.state.ErrMsg && <div className=\"alert alert-danger\"><h5>{this.state.ErrMsg}</h5></div>}\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Username</label>\r\n                                                <Field type=\"text\" name=\"username\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"username\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Email</label>\r\n                                                <Field type=\"email\" name=\"email\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"email\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Password</label>\r\n                                                <Field type=\"password\" name=\"password\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"password\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <button type=\"submit\" className=\"btn btn-primary inscli\">Salva</button>\r\n                                            <button type=\"button\" onClick={this.Login} className=\"btn btn-warning inscli\">Login</button>\r\n                                        </div>\r\n\r\n                                    </Form>\r\n\r\n                                )\r\n                            }\r\n\r\n                        </Formik>\r\n\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport \"./Welcome.css\";\r\nimport AuthenticationService from '../Services/authService.js';\r\nimport HandleError from \"../Errors/HandleError.js\"\r\n\r\n//Classe per la pagina di benvenuto dell'utente subito dopo il login\r\nexport default class WelcomeComponent extends Component {\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"GestFidApp\">\r\n                <section id=\"welcomeSection\">\r\n                    <h1>Benvenuti in GestFid</h1>\r\n                    <p>Saluti <b>{this.props.match.params.userId}</b></p>\r\n                    <Link to=\"/clienti\" type=\"button\" className=\"btn btn-primary\" >Vai ai clienti disponibili</Link><br/>\r\n                    <Link to=\"/companies\" type=\"button\" className=\"btn btn-success\" >Crea una nuova azienda</Link>\r\n                </section>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}","import axios from \"axios\";\r\nimport * as Constants from \"../../../constants\";\r\n\r\n//Metodi per comunicare con le API backend relative ai clienti.\r\nclass ClientiService {\r\n\r\n    state = {\r\n        Server: Constants.DOMAIN,\r\n        BaseURL: \"/api/clienti\"\r\n    }\r\n\r\n    getAllClientiData = () => {\r\n        return axios.get(`${this.state.Server}${this.state.BaseURL}/cerca/all`);\r\n    }\r\n\r\n    getClientiByCode = (codfid) => {\r\n        return axios.get(`${this.state.Server}${this.state.BaseURL}/cerca/codice/${codfid}`);\r\n    }\r\n\r\n    delClienteByCode = (codfid) => {\r\n        return axios.delete(`${this.state.Server}${this.state.BaseURL}/elimina/codfid/${codfid}`);\r\n    }\r\n\r\n    insCliente = (cliente) => {\r\n        return axios.post(`${this.state.Server}${this.state.BaseURL}/inserisci`, cliente);\r\n    }\r\n\r\n}\r\n\r\nexport default new ClientiService();","import React, { Component } from \"react\";\r\nimport './Clienti.css';\r\nimport ClientiService from \"../Services/Api/Clienti/ClientiAPI.js\"\r\nimport AuthenticationService from '../Services/authService.js';\r\nimport { MDBDataTable, MDBCard, MDBCardHeader, MDBCardBody, MDBBtn } from 'mdbreact';\r\nimport HandleError from \"../Errors/HandleError.js\"\r\nimport jwt from \"jsonwebtoken\"\r\n\r\n\r\n//Classe principale per la gestione dei clienti\r\nexport default class Clienti extends Component {\r\n\r\n    state = {\r\n        clienti: [],\r\n        CodFid: \"\",\r\n        ErrWebApi: false,\r\n        ErrMsg: \"\",\r\n        NumCli: 0,\r\n        OkMsg: null\r\n    }\r\n\r\n    //Metodo ideale per eseguire le operazioni di interfacciamento con i webservices all'avvio della scehrmata\r\n    componentDidMount() {\r\n        //Appena caricata la classe, cerco tutti i clienti presenti nel DB\r\n        this.CercaTutti();\r\n    }\r\n\r\n    //Metodo per cercare tutti i cleitni nel DB richiamanto il metodo che contatta l'API\r\n    CercaTutti = () => {\r\n        ClientiService.getAllClientiData()\r\n            .then(response => this.handleResponse(response))\r\n            .catch(error => {\r\n                console.log(\"ERRORE: %O\", error);\r\n                HandleError.handleError(this, error)\r\n            })\r\n    }\r\n\r\n    //Metodo per resettare tutti i valori dello state\r\n    ResetValue = () => {\r\n        this.setState({ clienti: [], ErrWebApi: false, ErrMsg: \"\", NumCli: 0 });\r\n    }\r\n\r\n    //Metodo per cercare un cliente in base al suo ID\r\n    Cerca = () => {\r\n\r\n        this.ResetValue();\r\n\r\n        //Se non viene passato nessun ID allora ritorno tutti i cleinti.\r\n        if (this.state.CodFid === \"\") {\r\n            ClientiService.getAllClientiData()\r\n                .then(response => this.handleResponse(response))\r\n                .catch(error => HandleError.handleError(this, error))\r\n        } else {\r\n            ClientiService.getClientiByCode(this.state.CodFid)\r\n                .then(response => this.handleResponse(response))\r\n                .catch(error => HandleError.handleError(this, error))\r\n        }\r\n    }\r\n\r\n    //MEtodo per eliminare un cliente in base al suo ID\r\n    Elimina = (codfid) => {\r\n\r\n        ClientiService.delClienteByCode(codfid)\r\n            .then(() => {\r\n                this.setState({ OkMsg: `Eliminazione cliente ${codfid} eseguita con successo!` })\r\n                this.ResetValue();\r\n                this.CercaTutti();\r\n            })\r\n            .catch(error => HandleError.handleError(this, error))\r\n    }\r\n\r\n    //Metodo per visualizzare la form di modifica di un partiolare cliente in base all'ID. Se l'Id è -1 si intende un nuovo cliente (Form vuota).\r\n    Modifica = (codfid) => {\r\n        this.props.history.push(`/inscliente/${codfid}`);\r\n    }\r\n\r\n    //Metodo per inserire un nuovo cliente. Uguale a Modifica() ma viene passato -1 come parametro\r\n    Inserisci = () => {\r\n        console.log(\"Premuto il tasto Inserimento!\");\r\n\r\n        this.props.history.push(`/inscliente/-1`);\r\n    }\r\n\r\n\r\n    //Metodo per gestire le risposte positive dei metodi.\r\n    //Le risposte negative vengono gestite da handleError.js nella cartella Errors\r\n    handleResponse = (response) => {\r\n\r\n        this.setState({\r\n            clienti: this.state.clienti.concat(response.data)\r\n        })\r\n\r\n        //Questo secondo set state serve perchè se metto tutto in uno, il valore non si aggiorna perchè clienti non è ancora settato. Normale andamento del thread.\r\n        this.setState({\r\n            NumCli: this.state.clienti.length\r\n        })\r\n\r\n    }\r\n\r\n    //Ritorno la pagina visualizzata\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section id=\"clientiSection\">\r\n                    <h3>Clienti Disponibili: {this.state.NumCli}</h3>\r\n\r\n                    <div>\r\n                        <button style={{ display: \"inline-block\" }} type=\"button\" className=\"btn btn-primary\" onClick={this.Cerca}><i className=\"fa fa-search\"></i></button>\r\n                        <div style={{ display: \"inline-block\" }} className=\"filter-group\">\r\n                            <label>Fltro: </label>\r\n                            <input name=\"CodFid\" type=\"text\" className=\"form-control\" value={this.state.CodFid} onChange={this.GestMod} />\r\n                        </div>\r\n                    </div>\r\n                    {this.DatatablePage()}\r\n                </section>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    //Metodo che aggiorna le variabili dello state quando vengono modificati i dati all'interno della form\r\n    GestMod = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    //Metodo per la generazione dinamica della DataTable. Uso mdbreact.\r\n    DatatablePage = () => {\r\n\r\n        //Array di lavoro\r\n        var c = [];\r\n\r\n        //Bottoni di modifica e eliminazione di un cliente. Index è il codfid.\r\n        const buttonDelete = (index) => { return <button id={\"delete-\" + index} onClick={e => window.confirm(`Confermi l'eliminazione del cliente ${index}?`) && this.Elimina(index)} type=\"button\" className=\"btn btn-danger rounded\" size=\"sm\">Elimina</button> }\r\n        const buttonEdit = (index) => { return <button id={\"edit-\" + index} onClick={() => this.Modifica(index)} type=\"button\" className=\"btn btn-warning rounded\" size=\"sm\">Modifica</button> }\r\n\r\n        //Aggiungo a c tutti i clienti\r\n        this.state.clienti.map((cliente, index) => {\r\n            cliente.cards != null\r\n                ? c[index] = { codfid: cliente.codfid, nominativo: cliente.nominativo, bollini: cliente.cards.bollini, data: cliente.cards.ultimaspesa, edit: buttonEdit(cliente.codfid), delete: buttonDelete(cliente.codfid) }\r\n                : c[index] = { codfid: cliente.codfid, nominativo: cliente.nominativo, bollini: 0, data: \"Sconosciuta\", edit: buttonEdit(cliente.codfid), delete: buttonDelete(cliente.codfid) }\r\n        })\r\n\r\n        //Dati della DataTable. Colonne statiche e Righe dinamiche\r\n        const data = {\r\n            columns: [\r\n                {\r\n                    label: 'CodFid',\r\n                    field: 'codfid',\r\n                    sort: 'asc',\r\n                    width: 150\r\n                },\r\n                {\r\n                    label: 'Name',\r\n                    field: 'nominativo',\r\n                    sort: 'asc',\r\n                    width: 150\r\n                },\r\n                {\r\n                    label: 'Bollini',\r\n                    field: 'bollini',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Data',\r\n                    field: 'data',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Modifica',\r\n                    field: 'edit',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Delete',\r\n                    field: 'delete',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                }\r\n            ],\r\n            rows: c\r\n        };\r\n\r\n        //Renderizzo la DataTable\r\n        return (\r\n            <MDBCard style={{ width: \"90%\", margin: \"2rem auto\", \"maxWidth\": \"90vw\" }}>\r\n                <MDBCardHeader tag=\"h3\" className=\"text-center font-weight-bold text-uppercase py-4\">\r\n                    Table Editable\r\n                    <br /><button onClick={this.Inserisci} type=\"button\" className=\"btn btn-info rounded\"><i className=\"fa fa-plus\"></i> Aggiungi nuovo cliente</button>\r\n                </MDBCardHeader>\r\n                <MDBCardBody>\r\n                    \r\n                    {/* Sezione Avvisi */}\r\n                    {/*Significa che se OkMsg non è null appare l'alert altrimenti nulla.*/}\r\n                    {this.state.OkMsg && <div className=\"alert alert-success\">{this.state.OkMsg}</div>}\r\n                    <ErrWebApiMsg ErrWebApi={this.state.ErrWebApi} ErrMsg={this.state.ErrMsg} obj={this}/>\r\n\r\n                    {/* Tabella */}\r\n                    <MDBDataTable btn striped bordered hover entriesOptions={[5, 20, 25]} entries={5} data={data} />\r\n                </MDBCardBody>\r\n            </MDBCard>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction ErrWebApiMsg(props) {\r\n    if (props.ErrWebApi) {\r\n        return (\r\n            <div>\r\n                <div className=\"alert alert-danger\" role=\"alert\"><h3>{props.ErrMsg}</h3></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null;\r\n}","import axios from \"axios\";\r\nimport * as Constants from \"../../../constants\";\r\n\r\n//Metodi per comunicare con le API backend relative ai clienti.\r\nclass CompaniesService {\r\n\r\n    state = {\r\n        Server: Constants.DOMAIN,\r\n        BaseURL: \"/api/companies\"\r\n    }\r\n\r\n    getAllCompaniesData = () => {\r\n        return axios.get(`${this.state.Server}${this.state.BaseURL}/cerca/all`);\r\n    }\r\n\r\n    getCompanyById = (id) => {\r\n        return axios.get(`${this.state.Server}${this.state.BaseURL}/cerca/id/${id}`);\r\n    }\r\n\r\n    delCompanyById = (id) => {\r\n        return axios.delete(`${this.state.Server}${this.state.BaseURL}/elimina/id/${id}`);\r\n    }\r\n\r\n    insCompany = (company) => {\r\n        return axios.post(`${this.state.Server}${this.state.BaseURL}/insert`, company);\r\n    }\r\n\r\n    searchUsersToInvite = (companyId) => {\r\n        console.log(\"ID: \" + companyId);\r\n        return axios.get(`${this.state.Server}${this.state.BaseURL}/searchUserToInvite/${companyId}`);\r\n    }\r\n\r\n    inviteUsers = (parameters) => {\r\n        console.log(\"parameters\" + \" %O\", parameters);\r\n        return axios.post(`${this.state.Server}${this.state.BaseURL}/invite`, parameters);\r\n    }\r\n\r\n}\r\n\r\nexport default new CompaniesService();","import React, { Component } from \"react\";\r\nimport CompaniesService from \"../Services/Api/Companies/CompaniesAPI.js\"\r\nimport { MDBDataTable, MDBCard, MDBCardHeader, MDBCardBody, MDBBtn } from 'mdbreact';\r\nimport HandleError from \"../Errors/HandleError.js\"\r\n\r\n\r\n//Classe principale per la gestione dei clienti\r\nexport default class Companies extends Component {\r\n\r\n    state = {\r\n        companies: [],\r\n        id: \"\",\r\n        ErrWebApi: false,\r\n        ErrMsg: \"\",\r\n        NumCom: 0,\r\n        OkMsg: null\r\n    }\r\n\r\n    //Metodo ideale per eseguire le operazioni di interfacciamento con i webservices all'avvio della scehrmata\r\n    componentDidMount() {\r\n        //Appena caricata la classe, cerco tutti i clienti presenti nel DB\r\n        this.CercaTutte();\r\n    }\r\n\r\n    //Metodo per cercare tutti i cleitni nel DB richiamanto il metodo che contatta l'API\r\n    CercaTutte = () => {\r\n        CompaniesService.getAllCompaniesData()\r\n            .then(response => this.handleResponse(response))\r\n            .catch(error => {\r\n                console.log(\"ERRORE: %O\", error);\r\n                HandleError.handleError(this, error)\r\n            })\r\n    }\r\n\r\n    //Metodo per resettare tutti i valori dello state\r\n    ResetValue = () => {\r\n        this.setState({ companies: [], ErrWebApi: false, ErrMsg: \"\", NumCom: 0 });\r\n    }\r\n\r\n    //Metodo per cercare un cliente in base al suo ID\r\n    Cerca = () => {\r\n\r\n        this.ResetValue();\r\n\r\n        //Se non viene passato nessun ID allora ritorno tutti i cleinti.\r\n        if (this.state.id === \"\") {\r\n            CompaniesService.getAllCompaniesData()\r\n                .then(response => this.handleResponse(response))\r\n                .catch(error => HandleError.handleError(this, error))\r\n        } else {\r\n            CompaniesService.getCompanyById(this.state.id)\r\n                .then(response => this.handleResponse(response))\r\n                .catch(error => HandleError.handleError(this, error))\r\n        }\r\n    }\r\n\r\n    //MEtodo per eliminare un cliente in base al suo ID\r\n    Elimina = (id) => {\r\n\r\n        CompaniesService.delCompanyById(id)\r\n            .then(() => {\r\n                this.setState({ OkMsg: `Eliminazione azienda ${id} eseguita con successo!` })\r\n                this.ResetValue();\r\n                this.CercaTutte();\r\n            })\r\n            .catch(error => HandleError.handleError(this, error))\r\n    }\r\n\r\n    //Metodo per visualizzare la form di modifica di un partiolare cliente in base all'ID. Se l'Id è -1 si intende un nuovo cliente (Form vuota).\r\n    Modifica = (id) => {\r\n        this.props.history.push(`/inscompany/${id}`);\r\n    }\r\n\r\n    //Metodo per inserire un nuovo cliente. Uguale a Modifica() ma viene passato -1 come parametro\r\n    Inserisci = () => {\r\n        console.log(\"Premuto il tasto Inserimento!\");\r\n\r\n        this.props.history.push(`/inscompany/-1`);\r\n    }\r\n\r\n\r\n    //Metodo per gestire le risposte positive dei metodi.\r\n    //Le risposte negative vengono gestite da handleError.js nella cartella Errors\r\n    handleResponse = (response) => {\r\n\r\n        this.setState({\r\n            companies: this.state.companies.concat(response.data)\r\n        })\r\n\r\n        //Questo secondo set state serve perchè se metto tutto in uno, il valore non si aggiorna perchè clienti non è ancora settato. Normale andamento del thread.\r\n        this.setState({\r\n            NumCom: this.state.companies.length\r\n        })\r\n\r\n    }\r\n\r\n    //Ritorno la pagina visualizzata\r\n    render() {\r\n        return (\r\n            <div>\r\n                <section id=\"companiesSection\">\r\n                    <h3>Aziende Disponibili: {this.state.NumCom}</h3>\r\n\r\n                    <div>\r\n                        <button style={{ display: \"inline-block\" }} type=\"button\" className=\"btn btn-primary\" onClick={this.Cerca}><i className=\"fa fa-search\"></i></button>\r\n                        <div style={{ display: \"inline-block\" }} className=\"filter-group\">\r\n                            <label>Fltro: </label>\r\n                            <input name=\"id\" type=\"text\" className=\"form-control\" value={this.state.id} onChange={this.GestMod} />\r\n                        </div>\r\n                    </div>\r\n                    {this.DatatablePage()}\r\n                </section>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    //Metodo che aggiorna le variabili dello state quando vengono modificati i dati all'interno della form\r\n    GestMod = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    //Metodo per la generazione dinamica della DataTable. Uso mdbreact.\r\n    DatatablePage = () => {\r\n\r\n        //Array di lavoro\r\n        var c = [];\r\n\r\n        //Bottoni di modifica e eliminazione di un cliente. Index è il id.\r\n        const buttonDelete = (index) => { return <button id={\"delete-\" + index} onClick={e => window.confirm(`Confermi l'eliminazione dell'azienda ${index}?`) && this.Elimina(index)} type=\"button\" className=\"btn btn-danger rounded\" size=\"sm\">Elimina</button> }\r\n        const buttonEdit = (index) => { return <button id={\"edit-\" + index} onClick={() => this.Modifica(index)} type=\"button\" className=\"btn btn-warning rounded\" size=\"sm\">Modifica</button> }\r\n\r\n        //Aggiungo a c tutti i clienti\r\n        this.state.companies.map((company, index) => {\r\n            console.log(\"%O\", company);\r\n            c[index] = { id: company.id, name: company.name, sector: company.sector, address: company.address.addressLineOne + \", \" + company.address.city + \", \" + company.address.cap + \", \" + company.address.province, edit: buttonEdit(company.id), delete: buttonDelete(company.id) }\r\n        })\r\n\r\n        //Dati della DataTable. Colonne statiche e Righe dinamiche\r\n        const data = {\r\n            columns: [\r\n                {\r\n                    label: 'id',\r\n                    field: 'id',\r\n                    sort: 'asc',\r\n                    width: 150\r\n                },\r\n                {\r\n                    label: 'Name',\r\n                    field: 'name',\r\n                    sort: 'asc',\r\n                    width: 150\r\n                },\r\n                {\r\n                    label: 'sector',\r\n                    field: 'sector',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Address',\r\n                    field: 'address',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Modifica',\r\n                    field: 'edit',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                },\r\n                {\r\n                    label: 'Delete',\r\n                    field: 'delete',\r\n                    sort: 'asc',\r\n                    width: 270\r\n                }\r\n            ],\r\n            rows: c\r\n        };\r\n\r\n        //Renderizzo la DataTable\r\n        return (\r\n            <MDBCard style={{ width: \"90%\", margin: \"2rem auto\", \"maxWidth\": \"90vw\" }}>\r\n                <MDBCardHeader tag=\"h3\" className=\"text-center font-weight-bold text-uppercase py-4\">\r\n                    Table Editable\r\n                    <br /><button onClick={this.Inserisci} type=\"button\" className=\"btn btn-info rounded\"><i className=\"fa fa-plus\"></i> Aggiungi nuova azienda</button>\r\n                </MDBCardHeader>\r\n                <MDBCardBody>\r\n                    \r\n                    {/* Sezione Avvisi */}\r\n                    {/*Significa che se OkMsg non è null appare l'alert altrimenti nulla.*/}\r\n                    {this.state.OkMsg && <div className=\"alert alert-success\">{this.state.OkMsg}</div>}\r\n                    <ErrWebApiMsg ErrWebApi={this.state.ErrWebApi} ErrMsg={this.state.ErrMsg} obj={this}/>\r\n\r\n                    {/* Tabella */}\r\n                    <MDBDataTable btn striped bordered hover entriesOptions={[5, 20, 25]} entries={5} data={data} />\r\n                </MDBCardBody>\r\n            </MDBCard>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction ErrWebApiMsg(props) {\r\n    if (props.ErrWebApi) {\r\n        return (\r\n            <div>\r\n                <div className=\"alert alert-danger\" role=\"alert\"><h3>{props.ErrMsg}</h3></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null;\r\n}","import React, { Component, useState } from \"react\";\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport AuthenticationService from \"../Services/authService.js\";\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport \"./LoginComponent.css\";\r\n\r\n\r\n/*\r\n* File chiamato da AuthRoute, utilizzato per visualizzare una finestra di alert con l'avviso che il token è prossimo alla scdenza con la possibilità\r\n* di rinnovare il token o di ritornare al login. Vengono visualizzati anche i coundown dei minuti e dei secondi del tempo rimanente. Di default 15 minuti.\r\n*/\r\n\r\n//Costanti utilizzate nelle diverse funzionalità.\r\nconst minuteSeconds = 60;\r\nconst hourSeconds = 3600;\r\nconst timerProps = {\r\n\tisPlaying: true,\r\n\tsize: 160,\r\n\tstrokeWidth: 6\r\n};\r\nconst secondsDim = \"Secondi\";\r\nconst minutesDim = \"Minuti\";\r\nconst getTimeSeconds = time => (minuteSeconds - time) | 0;\r\nconst getTimeMinutes = time => ((time % hourSeconds) / minuteSeconds) | 0;\r\n\r\n//Variabili utilizzate per capire se il tempo è finito o no.\r\nlet min = true;\r\nlet sec = true;\r\n\r\n\r\n\r\n//Funzionalità principale di questo file. Visualizzo la tabella di alert con i countdown di minuti e secondi alla scadenza.\r\nconst AlertsExpired = (props) => {\r\n\r\n\t//Devo inizializzare queste variabili qui altrimenti senza aggiornare la pagina il valore non verrebbe resettato.\r\n\tmin = true;\r\n\tsec = true;\r\n\t\r\n\t//Variabile show e metodo setShow per capire se visualizzare o meno la finestra di alert\r\n\tconst [show, setShow] = useState(props.show);\r\n\t\r\n\t//Variabile diff è il tempo in timestamp unix che manca alla scadenza del token\r\n\tlet diff = 0;\r\n\tif(props.diff !== undefined || props.diff < 0){\r\n\t\tdiff = props.diff;\r\n\t}\r\n\r\n\t//Varibile time viene inizializzata come diff per sicurezza ma se la proprieta esiste gli viene assegnata la sua proprietà che indica il tempo iniziale di scandenza del token\r\n\tlet time = diff;\r\n\tif(props.time !== undefined || props.time < 0){\r\n\t\ttime = props.time;\r\n\t}\r\n    \r\n    if (show) {\r\n        return (\r\n\t\t\t<>\r\n\t\t\t<div id=\"alertExp\" style={{position: \"fixed\",zIndex: \"1\",width: \"100%\",top: \"4rem\",textAlign: \"center\"}}>\r\n\r\n\t\t\t<Alert variant=\"danger\" onClose={click} dismissible>\r\n\t\t\t\t<Alert.Heading>ATTENZIONE!</Alert.Heading>  \r\n\t\t\t\t\t<p id=\"alertText\">Il tuo token sta per scaddere, lo vuoi aggiornare?</p>                  \r\n\t\t\t\t\t<div className=\"timer-wrapper\">\t\t\t\t\t\t\r\n\t\t\t\t\t\t<CountdownCircleTimer\r\n\t\t\t\t\t\t\t{...timerProps}\r\n\t\t\t\t\t\t\tcolors={[[\"#EF798A\"]]}\r\n\t\t\t\t\t\t\tduration={hourSeconds}\r\n\t\t\t\t\t\t\tinitialRemainingTime={(diff/1000) % hourSeconds}\r\n\t\t\t\t\t\t\tonComplete={totalElapsedTime => [\r\n\t\t\t\t\t\t\t(diff/1000) - totalElapsedTime > minuteSeconds\r\n\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{({ elapsedTime }) =>\t\t\t\t\t\r\n\t\t\t\t\t\t\t\trenderTime(minutesDim,\tgetTimeMinutes(hourSeconds - elapsedTime))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</CountdownCircleTimer>\r\n\t\t\t\t\t\t<CountdownCircleTimer\r\n\t\t\t\t\t\t\t{...timerProps}\r\n\t\t\t\t\t\t\tcolors={[[\"#218380\"]]}\r\n\t\t\t\t\t\t\tduration={minuteSeconds}\r\n\t\t\t\t\t\t\tinitialRemainingTime={(diff/1000) % minuteSeconds}\r\n\t\t\t\t\t\t\tonComplete={totalElapsedTime => [(diff/1000) - totalElapsedTime > 0]}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{({ elapsedTime }) =>\r\n\t\t\t\t\t\t\t\trenderTime(secondsDim, getTimeSeconds(elapsedTime))\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</CountdownCircleTimer>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<Button id=\"RefreshToken\" onClick={refresh} className=\"btn btn-warning rounded\">Refresh Token</Button>\r\n\t\t\t\t<a href=\"/login\" type=\"button\" className=\"btn btn-info rounded\">LOGIN</a>\r\n\t\t\t</Alert>\r\n\t\t\t</div>\r\n\t\t</>\r\n        )\r\n    }else{\r\n\t\treturn null;\r\n    }\r\n\r\n\t//Funzione per chiudere la tabella di alert\r\n    function click(){\r\n        setShow(false);\r\n    }\r\n\r\n\t//Funzione per aggiornare il token. Unica Copia quindi importante non perderla.\r\n    function refresh() {\r\n        click();\r\n        return(\r\n\t\tAuthenticationService.refreshToken()\r\n            .catch(error => console.log(error))\r\n\t\t);\r\n\t\t        \r\n\t}  \t\r\n}\r\n\r\n//Funzione per eliminare tutti gli elementi del dom con una specifica classe\r\nfunction removeElementsByClass(className){\r\n\tvar elements = document.getElementsByClassName(className);\r\n\twhile(elements.length > 0){\r\n\t\telements[0].parentNode.removeChild(elements[0]);\r\n\t}\r\n}\r\n\r\n//Funzionalità per renderizzare il tempo mancante nei due countdown.\r\nconst renderTime = ( dimension, remainingTime ) => {\r\n\r\n\t//Imposto le variabili sec e min a false se il corrispondente tempo si è esaurito\r\n\tif(dimension === secondsDim){\r\n\t\tif(remainingTime === 0){\r\n\t\t\tsec = false;\r\n\t\t}\r\n\t}else if(dimension === minutesDim){\r\n\t\tif(remainingTime === 0){\r\n\t\t\tmin = false;\r\n\t\t}\r\n\t}\r\n\r\n\t//Se il tempo è finito aggiorno i valori della finestra di alert.\r\n\tif (!min && !sec) {\r\n\t\tif(document.getElementById(\"RefreshToken\") !== null)\r\n\t\t\tdocument.getElementById(\"RefreshToken\").remove();\r\n\t\tif(document.getElementById(\"alertText\") !== null)\r\n\t\t\tdocument.getElementById(\"alertText\").innerHTML = \"Il tuo token è scaduto rifai il login per continuare.\";\r\n\t\tremoveElementsByClass(\"timer-wrapper\");\r\n\t  return <div className=\"timer\">Troppo tardi...</div>;\r\n\t}\r\n  \r\n\t//Se il tempo non è finito, ritorno il valore aggiornato del tempo rimanente.\r\n\treturn (\r\n\t  <div className=\"timer\">\r\n\t\t<div className=\"text\">Rimangono</div>\r\n\t\t<div className=\"value\">{remainingTime}</div>\r\n\t\t<div className=\"text\">{dimension}</div>\r\n\t  </div>\r\n\t);\r\n  };\r\n\r\nexport default AlertsExpired;","import React, { Component, useState } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport createReactClass from \"create-react-class\";\r\nimport AuthenticationService from \"./Services/authService.js\";\r\nimport { Redirect, Route } from \"react-router-dom\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport axios from 'axios'\r\nimport AlertsExpired from \"./Login/AlertsExpired\"\r\nimport * as constants from \"./constants\";\r\n\r\n//Inizializzo variabili globali di questo file\r\nlet token = null;\r\nlet user = null;\r\nlet exp = null;\r\nlet now = null;\r\n\r\n//Questa classe viene utilizzata nel ROUTING alle diverse pagine dell'app. Viene quindi chiamata quando si vuole aprire tutte le pagine che sono indirizzate tramite questa classe.\r\n//Visualizzi il suo utilizzo in GestFid.jsx\r\nexport default class AuthRoute extends Component {\r\n\r\n\t//Il costruttore viene eseguito al primo utilizzo della classe e avvia l'intercettore.\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.setupAxiosInterceptors();\r\n\t}\r\n\r\n\t//Metodo eseguito ogni volta alla fine del caricamento della classe.\r\n\t//Imposto correttamente le variabili globali e poi avvio il metodo loopIfExpired.\r\n\tcomponentDidMount = () => {\r\n\t\ttry {\r\n\t\t\tthis.setVariablesByCookie();\r\n\t\t\tthis.loopIfExpired();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\tsetVariablesByCookie = () => {\r\n\t\ttry {\r\n\t\t\ttoken = AuthenticationService.getTokenFromCookie();\r\n\t\t\tif (token !== null) {\r\n\t\t\t\tuser = AuthenticationService.getUserInfo();\r\n\t\t\t\texp = new Date(jwt.decode(token).exp * 1000).getTime(); //.getTime mi fornisce il valore timestamp unix di una data.\r\n\t\t\t\tnow = new Date().getTime();\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t//Questo metodo serve per controllare automaticamente ogni periodo di tempo uguale alla costante globale time se il token è prossimo alla scadenza.\r\n\t//Se lo è, visualizzo una finestra di alert (AlertsExpired.jsx) con la possibilità di aggiornare il token o di tornare al login con anche il countdown.\r\n\tloopIfExpired = () => {\r\n\r\n\t\tvar timer = setInterval(() => {\r\n\t\t\tconsole.log(\"loopIfExpired: \" + constants.TIME/1000 + \" secondi\");\r\n\t\t\t//Aggiorno le varibili globali essendo dentro ad una funzione ricorsiva.\r\n\t\t\tthis.setVariablesByCookie();\r\n\r\n\t\t\t//Controllo se il token è prossimo alla scadenza\r\n\t\t\tif(this.checkIfExpired() !== null){\r\n\t\t\t\tif (this.checkIfExpired()) {\r\n\r\n\t\t\t\t\t//Aggiungo al body la finestra di alert\r\n\t\t\t\t\tvar Hello = createReactClass({\r\n\t\t\t\t\t\trender: function () {\r\n\t\t\t\t\t\t\treturn <AlertsExpired obj={this} show={true} diff={(exp - now)} time={constants.TIME} />;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvar temp = document.createElement(\"div\");\r\n\t\t\t\t\t// render\r\n\t\t\t\t\tReactDOM.render(<Hello />, temp);\r\n\t\t\t\t\tvar container = document.querySelector(\"body\");\r\n\t\t\t\t\tif (container.querySelector(\"#alertExp\") === null || container.querySelector(\"#alertExp\") === undefined) {\r\n\t\t\t\t\t\tcontainer.appendChild(temp, document.querySelector(\"body\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Fine di aggiunta al body della finestra di alert\r\n\r\n\t\t\t\t}\r\n\t\t\t\t//In ogni caso richiamo la funzione che aspetterà time tempo prima di eseguirsi nuovamente.\r\n\t\t\t\t//this.loopIfExpired();\r\n\t\t\t}else{\r\n\t\t\t\tclearInterval(timer);\r\n\t\t\t}\r\n\t\t}, constants.TIME);\r\n\t}\r\n\r\n\t//Metodo per controlalre se il token è prossimo alla scadenza secondo la costante globale time\r\n\tcheckIfExpired = () => {\r\n\t\tif (token !== null) {\r\n\r\n\t\t\t//Se la data exp è nel futuro rispetto ad adesso e se exp meno now è minore o uguale al periodo di allerta (time = 15 minuti) ritorno true\r\n\t\t\tif (now < exp && (exp - now) <= constants.TIME + 10000) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else if (new Date() > exp) {//Se il token è già scaduto ritorno null\r\n\t\t\t\treturn null;\r\n\t\t\t} else { //Se il token non è ne già scaduto ne è prossimo alla scadenza ritorno false\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null; //Se il token non viene trovato ritorno null\r\n\t}\r\n\r\n\t//Questo è un Intercettore (Interceptors).\r\n\t//Servono per svolgere un operazione prima che si invia una richiesta alle webapi\r\n\tsetupAxiosInterceptors() {\r\n\t\tlet tokenB = \"\";\r\n\t\t//Questo è il metodo per usare l'intercettore.\r\n\t\taxios.interceptors.request.use(\r\n\t\t\t//Creo una nuova configurazione\r\n\t\t\t(config) => {\r\n\r\n\t\t\t\t//Aggiorno le variabili globali\r\n\t\t\t\tthis.setVariablesByCookie();\r\n\r\n\t\t\t\t//Devo aggiornare la variabile token anche qui altrimenti ritorna valori non aggiornati se non si aggiorna la pagina.\r\n\t\t\t\ttokenB = 'Bearer ' + token;\r\n\t\t\t\tif (AuthenticationService.isLogged()) {\r\n\t\t\t\t\tconfig.headers.authorization = tokenB\r\n\t\t\t\t}\r\n\t\t\t\treturn config;\r\n\t\t\t},\r\n\t\t\t(err) => {\r\n\t\t\t\treturn Promise.reject(err);\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tthis.setVariablesByCookie();\r\n\r\n\t\t//Mi ricavo i ruoli dell'utente loggato\r\n\t\tlet ruoli = \"\";\r\n\t\tif (token !== null && token !== undefined) {\r\n\t\t\truoli = jwt.decode(token).roles;\r\n\t\t}\r\n\t\t//Controllo che l'utente sia loggato e che iltoken non sia già scaduto. Altrimenti reindirizzo alla pagina di login\r\n\t\tif (AuthenticationService.isLogged() && this.checkIfExpired() !== null) {\r\n\r\n\t\t\t//myRole è in realtà il ruolo che è necessario avere per poter accedere ad una determinata pagina e viene passato nelle props in GestFid.jsx\r\n\t\t\tlet myRole = this.props.role;\r\n\r\n\t\t\t//Variabile di controllo per verificare che l'utnete abbia il ruolo necessario\r\n\t\t\tlet check = false;\r\n\r\n\t\t\t//Verifico che l'utente abbia il ruolo necessario\r\n\t\t\truoli.forEach(e => {\r\n\t\t\t\tif (e.authority !== null && e.authority === myRole) {\r\n\t\t\t\t\tcheck = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\t//Se l'utente non ha il ruolo necessario ad accedere alla pagina lo rimando alla pagina forbidden\r\n\t\t\tif (check) {\r\n\r\n\t\t\t\t//Se il token sta per scadere visualizzo la finestra di alert e renderizzo la pagina richiesta.\r\n\t\t\t\tif (this.checkIfExpired()) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<AlertsExpired obj={this} show={true} diff={(exp - now)} time={constants.TIME} />\r\n\t\t\t\t\t\t\t<Route {...this.props}></Route>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)\r\n\t\t\t\t} else { //Altrimenti renderizzo solamente la pagina richiesta\t\t\t\t\t\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Route {...this.props}></Route>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn <Redirect to=\"/forbidden\" />\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn <Redirect to=\"/login\" />\r\n\t\t}\r\n\r\n\t}\r\n\r\n}","import React, { Component } from \"react\";\r\nimport './DatiCliente.css';\r\nimport { Formik, FormikProps, Form, Field, ErrorMessage } from 'formik';\r\nimport ClientiService from '../../Services/Api/Clienti/ClientiAPI.js';\r\nimport HandleError from \"../../Errors/HandleError.js\"\r\nimport AuthRoute from \"../../AuthRoute\"\r\n\r\n\r\n//Classe per la tabella di modifica di un cliente e di inserimento di nuovi clienti. \r\nexport default class DatiClienteComponent extends Component {\r\n\r\n    state = {\r\n        id: '',\r\n        codfid: '',\r\n        nominativo: '',\r\n        indirizzo: '',\r\n        comune: '',\r\n        cap: '',\r\n        prov: '',\r\n        telefono: '',\r\n        mail: '',\r\n        attivo: true,\r\n        cards: {\r\n            \"bollini\": 0,\r\n            \"ultimaspesa\": \"2020-01-01\"\r\n        },\r\n        okMsg: null,\r\n        ErrMsg: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //Controllo se la props codfid indica un particolare cliente o l'inserimento di uno nuovo (-1)\r\n        let CodFid = this.props.match.params.codfid;\r\n\r\n        if (CodFid != \"-1\") {\r\n            ClientiService.getClientiByCode(CodFid)\r\n                .then(response => this.handleResponse(response))\r\n                .catch(error => HandleError.handleError(this, error))\r\n        }\r\n    }\r\n\r\n    //Gestisco le risposte positive.\r\n    //Le risposte negative vengono gestite da handleError.js nella cartella Errors\r\n    handleResponse(response) {\r\n\r\n        this.setState({\r\n            id: response.data.id,\r\n            codfid: response.data.codfid,\r\n            nominativo: response.data.nominativo,\r\n            indirizzo: response.data.indirizzo,\r\n            comune: response.data.comune,\r\n            cap: response.data.cap,\r\n            prov: response.data.prov,\r\n            telefono: response.data.telefono,\r\n            mail: response.data.mail,\r\n            attivo: response.data.attivo,\r\n            cards: response.data.cards,\r\n            okMsg: null\r\n        })\r\n\r\n    }\r\n\r\n    //Metodo per salvare il nuovo o aggiornare uno esistente\r\n    Salva = (values) => {\r\n\r\n        ClientiService.insCliente({\r\n            id: values.id,\r\n            codfid: values.codfid,\r\n            nominativo: values.nominativo,\r\n            indirizzo: values.indirizzo,\r\n            comune: values.comune,\r\n            cap: values.cap,\r\n            prov: values.prov,\r\n            telefono: values.telefono,\r\n            mail: values.mail,\r\n            attivo: values.attivo,\r\n            cards: values.cards,\r\n        })\r\n            .then(\r\n                () => {\r\n                    this.setState({ okMsg: 'Inserimento dati eseguito con successo' });\r\n                }\r\n            )\r\n            .catch(error => HandleError.handleError(this, error));\r\n    }\r\n\r\n    //Metodo per annullare le modifiche e ritornare a tutti i clienti\r\n    Annulla = () => {\r\n        if (window.confirm(\"Abbandoni le modifiche?\")) {\r\n            this.props.history.push(`/clienti`);\r\n        }\r\n    }\r\n\r\n    //Metodo per validare i dati inseriti nella FORM\r\n    Valida = (values) => {\r\n        let errors = {}\r\n\r\n        if (!values.codfid) {\r\n            errors.codfid = \"Inserisci il codice fidelity del cliente\"\r\n        }\r\n        else if (values.codfid.length !== 8) {\r\n            errors.codfid = \"Il codice fidelity deve avere 8 caratteri\"\r\n        }\r\n\r\n        if (!values.nominativo) {\r\n            errors.nominativo = \"Inserisci il nome del cliente\"\r\n        }\r\n        else if (values.nominativo.length < 6) {\r\n            errors.nominativo = \"Il nome deve avere almeno 6 caratteri\"\r\n        }\r\n\r\n        if (!values.indirizzo) {\r\n            errors.indirizzo = \"Inserisci il indirizzo del cliente\"\r\n        }\r\n\r\n        if (!values.comune) {\r\n            errors.comune = \"Inserisci il comune del cliente\"\r\n        }\r\n\r\n        if (!values.telefono) {\r\n            errors.telefono = \"Inserisci il telefono del cliente\"\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    render() {\r\n\r\n        //Imposto il valore dei campi della form con quelli salvati nello state. ATTENZIONE, questi nomi devo essere uguali a quelli dello state.\r\n        let { id, codfid, nominativo, indirizzo, comune, cap, prov, telefono, mail, attivo, cards } = this.state;\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h3 className=\"card-title mb-4\">Dati Cliente Fidelity</h3>\r\n\r\n                        <Formik\r\n                            //Inizio della FORM. Per crearla utilizzo FORMIK\r\n                            //Imposto i valori iniziali. ATTENZIONE, questi nomi devono essere uguali a quelli dell'id dei campi della form\r\n                            initialValues={{ id, codfid, nominativo, indirizzo, comune, cap, prov, telefono, mail, attivo, cards }}\r\n\r\n                            //Nel submit della FORM chiamo il metodo salva\r\n                            onSubmit={this.Salva}\r\n\r\n                            //Con questa proprietà i parametri vengono inizializzati all'avvio\r\n                            enableReinitialize={true}\r\n\r\n                            //Valido i valori\r\n                            validate={this.Valida}\r\n\r\n                            //Con queste due proprietà, la form verrà validata solamente quando si preme il tasto salva, altrimenti verrebbe validata fin da subito\r\n                            validateOnChange={false}\r\n                            validateOnBlur={false}\r\n                        >\r\n\r\n                            {\r\n\r\n                                (props) => (\r\n\r\n                                    <Form>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <img style={{ width: \"100px\", \"marginBottom\": \"2rem\" }} src={`../logo.png`} className=\"img-sm rounded-circle border\" alt=\"imgcli\" />\r\n                                        </div>\r\n\r\n                                        {this.state.okMsg && <div className=\"alert alert-success\"><h5>{this.state.okMsg}</h5></div>}\r\n                                        {this.state.ErrMsg && <div className=\"alert alert-danger\"><h5>{this.state.ErrMsg}</h5></div>}\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Codice Fidelity *</label>\r\n                                                <Field type=\"text\" name=\"codfid\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"codfid\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Nominativo *</label>\r\n                                                <Field type=\"text\" name=\"nominativo\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"nominativo\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Indirizzo</label>\r\n                                                <Field type=\"text\" name=\"indirizzo\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"indirizzo\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Comune</label>\r\n                                                <Field type=\"text\" name=\"comune\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"comune\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Cap</label>\r\n                                                <Field type=\"text\" name=\"cap\" className=\"form-control\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Provincia</label>\r\n                                                <Field as=\"select\" name=\"prov\" className=\"form-control\" >\r\n                                                    <option value=\"\">Seleziona...</option>\r\n                                                    <option value=\"SS\">Sassari...</option>\r\n                                                    <option value=\"CA\">Cagliari...</option>\r\n                                                    <option value=\"NU\">Nuoro...</option>\r\n                                                    <option value=\"BZ\">Bolzano...</option>\r\n                                                    <option value=\"TN\">Trento...</option>\r\n                                                </Field>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Telefono</label>\r\n                                                <Field type=\"text\" name=\"telefono\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"telefono\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Mail</label>\r\n                                                <Field type=\"text\" name=\"mail\" className=\"form-control\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <label className=\"custom-control custom-checkbox\">\r\n                                                <Field type=\"checkbox\" name=\"attivo\" className=\"custom-control-input\" />\r\n                                                <div className=\"custom-control-label\">Attivo</div>\r\n                                            </label>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <button type=\"submit\" className=\"btn btn-primary inscli\">Salva</button>\r\n                                            <button type=\"button\" onClick={this.Annulla} className=\"btn btn-warning inscli\">Annulla</button>\r\n                                        </div>\r\n\r\n                                    </Form>\r\n\r\n                                )\r\n\r\n                            }\r\n\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nclass SelectField extends Component {\r\n  handleChange = value => {\r\n    console.log(value);\r\n    const { onChange, name } = this.props;\r\n\r\n    onChange(name, value);\r\n  };\r\n\r\n  handleBlur = () => {\r\n    const { onBlur, name } = this.props;\r\n\r\n    onBlur(name, true);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      name,\r\n      label,\r\n      placeholder,\r\n      options,\r\n      value,\r\n      isMulti,\r\n      //isDisabled,\r\n      //touched,\r\n      //error,\r\n      isClearable,\r\n      backspaceRemovesValue\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"input-field-wrapper\">\r\n        {label && (\r\n          <h3 className=\"input-label\" htmlFor={name} /*error={error}*/>\r\n            {label}\r\n          </h3>\r\n        )}\r\n\r\n        <Select\r\n          id={id}\r\n          placeholder={placeholder}\r\n          options={options}\r\n          //getOptionLabel={getOptionLabel}\r\n          //getOptionValue={getOptionValue}\r\n          value={value}\r\n          onChange={this.handleChange}\r\n          //onBlur={this.handleBlur}\r\n          //touched={touched}\r\n          //error={error}\r\n          isMulti={isMulti}\r\n          //isDisabled={isDisabled}\r\n          isClearable={isClearable}\r\n          backspaceRemovesValue={backspaceRemovesValue}\r\n          components={{ ClearIndicator: null }}\r\n        />\r\n\r\n        {/*touched && error ? <p className=\"error-text\">{error}</p> : null*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { SelectField };\r\n","import React, { Component } from \"react\";\r\nimport { Formik, FormikProps, Form, Field, ErrorMessage } from 'formik';\r\nimport CompaniesService from '../../Services/Api/Companies/CompaniesAPI.js';\r\nimport HandleError from \"../../Errors/HandleError.js\"\r\nimport Select from 'react-select'\r\nimport { SelectField } from \"./SelectField\";\r\n\r\nexport default class CompanyDataComponent extends Component {\r\n    state = {\r\n        id: '',\r\n        name: '',\r\n        logo: 'logo',\r\n        ownerId: '',\r\n        addressLineOne: '',\r\n        addressLineTwo: '',\r\n        city: '',\r\n        cap: '',\r\n        province: '',\r\n        country: '',\r\n        legalName: '',\r\n        email: '',\r\n        sector: '',\r\n        Msg: null,\r\n        okMsg: null,\r\n        ErrMsg: null,\r\n        users: [],\r\n        utenti: []\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //Controllo se la props codfid indica un particolare cliente o l'inserimento di uno nuovo (-1)\r\n        let id = this.props.match.params.id;\r\n\r\n        if (id != \"-1\") {\r\n            CompaniesService.getCompanyById(id)\r\n                .then(response => this.handleResponse(response))\r\n                .catch(error => HandleError.handleError(this, error))\r\n\r\n            CompaniesService.searchUsersToInvite(id)\r\n                .then(response => {\r\n                    response.data.forEach(user => {\r\n                        this.setState({\r\n                            users: this.state.users.concat(\r\n                                {\r\n                                    label: user.username,\r\n                                    value: user.id\r\n                                }\r\n                            )\r\n                        })\r\n                    });\r\n                    console.log(\"USERS: %O\", this.state.users);\r\n                })\r\n                .catch(error => HandleError.handleError(this, error))\r\n\r\n        }\r\n    }\r\n\r\n    //Gestisco le risposte positive.\r\n    //Le risposte negative vengono gestite da handleError.js nella cartella Errors\r\n    handleResponse(response) {\r\n\r\n        this.setState({\r\n            id: response.data.id,\r\n            name: response.data.name,\r\n            ownerId: response.data.ownerId,\r\n            addressLineOne: response.data.address.addressLineOne,\r\n            addressLineTwo: response.data.address.addressLineTwo,\r\n            city: response.data.address.city,\r\n            cap: response.data.address.cap,\r\n            province: response.data.address.province,\r\n            country: response.data.address.country,\r\n            legalName: response.data.legalName,\r\n            email: response.data.email,\r\n            sector: response.data.sector,\r\n            okMsg: null,\r\n        })\r\n    }\r\n\r\n    handleSubmit = (values, { resetForm, setSubmitting }) => {\r\n        console.log(\"handleSubmit values\", values);\r\n\r\n        CompaniesService.inviteUsers({\r\n            companyId: this.state.id,\r\n            utenti: values.utenti            \r\n            //utenti: [\"prova\", \"prova 2\"]\r\n        })\r\n            .then(\r\n                () => {\r\n                    this.setState({\r\n                        okMsg: 'Invito eseguito correttamente',\r\n                        Msg: null\r\n                    });\r\n                }\r\n            )\r\n            .catch(error => {\r\n                this.setState({\r\n                    Msg: null\r\n                });\r\n                HandleError.handleError(this, error)\r\n            });\r\n\r\n        //resetForm();\r\n        //setSubmitting(false);\r\n    };\r\n\r\n    //Metodo per salvare il nuovo o aggiornare uno esistente\r\n    Salva = (values) => {\r\n\r\n        this.setState({\r\n            Msg: \"Creazione azienda in corso...\"\r\n        })\r\n\r\n        CompaniesService.insCompany({\r\n            id: values.id,\r\n            name: values.name,\r\n            logo: \"logo\",\r\n            ownerId: values.ownerId,\r\n            address: {\r\n                addressLineOne: values.addressLineOne,\r\n                addressLineTwo: values.addressLineTwo,\r\n                city: values.city,\r\n                cap: values.cap,\r\n                province: values.province,\r\n                country: values.country\r\n            },\r\n            legalName: values.legalName,\r\n            email: values.email,\r\n            sector: values.sector\r\n        })\r\n            .then(\r\n                () => {\r\n                    this.setState({\r\n                        okMsg: 'Inserimento dati eseguito con successo',\r\n                        Msg: null\r\n                    });\r\n                }\r\n            )\r\n            .catch(error => {\r\n                this.setState({\r\n                    Msg: null\r\n                });\r\n                HandleError.handleError(this, error)\r\n            });\r\n    }\r\n\r\n    //Metodo per annullare le modifiche e ritornare a tutti i clienti\r\n    Annulla = () => {\r\n        if (window.confirm(\"Abbandoni le modifiche?\")) {\r\n            this.props.history.push(`/companies`);\r\n        }\r\n    }\r\n\r\n    //Metodo per validare i dati inseriti nella FORM\r\n    Valida = (values) => {\r\n        let errors = {}\r\n\r\n        if (!values.name) {\r\n            errors.name = \"Inserisci il nome dell'azienda\"\r\n        }\r\n        else if (values.name.length < 6) {\r\n            errors.name = \"Il nome deve avere almeno 6 caratteri\"\r\n        }\r\n\r\n        if (!values.addressLineOne) {\r\n            errors.addressLineOne = \"Inserisci l' indirizzo dell'azienda\"\r\n        }\r\n\r\n        if (!values.cap) {\r\n            errors.cap = \"Inserisci il cap della città dell'azienda\"\r\n        }\r\n\r\n        if (!values.city) {\r\n            errors.city = \"Inserisci la città dell'azienda\"\r\n        }\r\n\r\n        if (!values.province) {\r\n            errors.province = \"Inserisci la privincia della città dell'azienda\"\r\n        }\r\n\r\n        if (!values.sector) {\r\n            errors.sector = \"Inserisci il settore dell'azienda\"\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        //Imposto il valore dei campi della form con quelli salvati nello state. ATTENZIONE, questi nomi devo essere uguali a quelli dello state.\r\n        let { id, name, logo, addressLineOne, addressLineTwo, city, province, country, cap, legalName, email, sector, utenti } = this.state;\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h3 className=\"card-title mb-4\">Dati Azienda</h3>\r\n\r\n\r\n                        <Formik\r\n                            //Inizio della FORM. Per crearla utilizzo FORMIK\r\n                            //Imposto i valori iniziali. ATTENZIONE, questi nomi devono essere uguali a quelli dell'id dei campi della form\r\n                            initialValues={{ id, name, logo, addressLineOne, addressLineTwo, city, province, country, cap, legalName, email, sector }}\r\n\r\n                            //Nel submit della FORM chiamo il metodo salva\r\n                            onSubmit={(values) => this.Salva(values)}\r\n\r\n                            //Con questa proprietà i parametri vengono inizializzati all'avvio\r\n                            enableReinitialize={true}\r\n\r\n                            //Valido i valori\r\n                            validate={this.Valida}\r\n\r\n                            //Con queste due proprietà, la form verrà validata solamente quando si preme il tasto salva, altrimenti verrebbe validata fin da subito\r\n                            validateOnChange={false}\r\n                            validateOnBlur={false}\r\n                        >\r\n\r\n                            {\r\n\r\n                                (props) => (\r\n\r\n                                    <Form>\r\n\r\n                                        <div className=\"form-group\">\r\n                                            <img name=\"logo\" style={{ width: \"100px\", \"marginBottom\": \"2rem\" }} src={`../logo.png`} className=\"img-sm rounded-circle border\" alt=\"imgcli\" />\r\n                                        </div>\r\n\r\n                                        {this.state.Msg && <div className=\"alert alert-info\"><h5>{this.state.Msg}</h5></div>}\r\n                                        {this.state.okMsg && <div className=\"alert alert-success\"><h5>{this.state.okMsg}</h5></div>}\r\n                                        {this.state.ErrMsg && <div className=\"alert alert-danger\"><h5>{this.state.ErrMsg}</h5></div>}\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Nome *</label>\r\n                                                <Field type=\"text\" name=\"name\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"name\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Indirizzo #1</label>\r\n                                                <Field type=\"text\" name=\"addressLineOne\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"addressLineOne\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Cap</label>\r\n                                                <Field type=\"text\" name=\"cap\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"cap\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Città</label>\r\n                                                <Field type=\"text\" name=\"city\" className=\"form-control\" />\r\n                                                <ErrorMessage name=\"city\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Provincia</label>\r\n                                                <Field as=\"select\" name=\"province\" className=\"form-control\" >\r\n                                                    <option value=\"\">Seleziona...</option>\r\n                                                    <option value=\"SS\">Sassari...</option>\r\n                                                    <option value=\"CA\">Cagliari...</option>\r\n                                                    <option value=\"NU\">Nuoro...</option>\r\n                                                    <option value=\"BZ\">Bolzano...</option>\r\n                                                    <option value=\"TN\">Trento...</option>\r\n                                                </Field>\r\n                                                <ErrorMessage name=\"province\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Settore</label>\r\n                                                <Field as=\"select\" name=\"sector\" className=\"form-control\" >\r\n                                                    <option value=\"\">Seleziona...</option>\r\n                                                    <option value=\"Macelleria\">Macelleria</option>\r\n                                                    <option value=\"Frutta e Verdura\">Frutta e Verdura</option>\r\n                                                    <option value=\"Informatica\">Informatica</option>\r\n                                                    <option value=\"Idraulica\">Idraulica</option>\r\n                                                    <option value=\"Falegnameria\">Falegnameria</option>\r\n                                                </Field>\r\n                                                <ErrorMessage name=\"sector\" component=\"span\" className=\"errmsg\" />\r\n                                            </div>\r\n                                            <div className=\"col form-group\">\r\n                                                <label>Mail</label>\r\n                                                <Field type=\"text\" name=\"email\" className=\"form-control\" />\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div>\r\n                                            <button type=\"submit\" className=\"btn btn-primary insCom\">Salva</button>\r\n                                            <button type=\"button\" onClick={this.Annulla} className=\"btn btn-warning insCom\">Annulla</button>\r\n                                        </div>\r\n\r\n                                    </Form>\r\n\r\n                                )\r\n\r\n                            }\r\n\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h3 className=\"card-title mb-4\">Utenti da invitare</h3>\r\n\r\n                        <Formik\r\n                            initialValues={this.state.utenti}\r\n                            onSubmit={(values, props) => this.handleSubmit(values, props)}\r\n                            render={({\r\n                                utenti,\r\n                                //touched,\r\n                                setFieldValue,\r\n                                //setFieldTouched,\r\n                                //isSubmitting\r\n                            }) => (\r\n                                    <Form>\r\n                                        <SelectField\r\n                                            id=\"utenti\"\r\n                                            name=\"utenti\"\r\n                                            label=\"Invita utenti\"\r\n                                            placeholder=\"Seleziona utenti\"\r\n                                            options={this.state.users}\r\n                                            value={utenti}\r\n                                            isMulti={true}\r\n                                            onChange={setFieldValue}\r\n                                            //onBlur={setFieldTouched}\r\n                                            //touched={touched.fieldOfResearch}\r\n                                            isClearable={true}\r\n                                            backspaceRemovesValue={true}\r\n                                        />\r\n\r\n                                        <button type=\"submit\" /*disabled={isSubmitting}*/>\r\n                                            <h3>Submit</h3>\r\n                                        </button>\r\n                                    </Form>\r\n                                )}\r\n                        />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport './HeaderComponent.css';\r\nimport {withRouter} from \"react-router\";\r\nimport AuthenticationService from \"../Services/authService.js\";\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Header e navbar del progetto\r\nclass HeaderComponent extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"HeaderComponent\">\r\n                <Menu />\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(HeaderComponent);\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n            <Link rel=\"nofollow noopener\" target=\"_blank\" className=\"navbar-brand\" to=\"/\" >\r\n                <img src={`../logo.png`} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" /> Problems Solving\r\n            </Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <Link className=\"nav-link\" to=\"/\" >Home <span className=\"sr-only\">(current)</span></Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">                        \r\n                        <Link className=\"nav-link\" to=\"/clienti\" >Clienti</Link>\r\n                    </li>\r\n                    <li className=\"nav-item dropdown\">\r\n                        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            Dropdown\r\n                            </a>\r\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                            <a className=\"dropdown-item\" href=\"#\">Action</a>\r\n                            <a className=\"dropdown-item\" href=\"#\">Another action</a>\r\n                            <div className=\"dropdown-divider\"></div>\r\n                            <a className=\"dropdown-item\" href=\"#\">Something else here</a>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link disabled\" href=\"#\">Disabled</a>\r\n                    </li>\r\n                </ul>\r\n                <Search />\r\n                <User />\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nconst Search = () => {\r\n    return (\r\n        <div className=\"searchDiv\">\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n                <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst User = () => {\r\n    return (\r\n        <ul className=\"navbar-nav nav-flex-icons\">\r\n            <li style={{ margin: 'auto' }} className=\"nav-item\">\r\n                <a className=\"nav-link\">1\r\n                    <i className=\"fa fa-envelope\"></i>\r\n                </a>\r\n            </li>\r\n            <li className=\"nav-item avatar dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink-55\" data-toggle=\"dropdown\"\r\n                    aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                    <img style={{ width: '50px' }} src={`../logo.png`} className=\"rounded-circle z-depth-0\"\r\n                        alt=\"avatar image\" />\r\n                </a>\r\n                <UserInfo/>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nconst UserInfo = () => {\r\n    if(AuthenticationService.isLogged()){\r\n        return(\r\n\r\n            <div className=\"dropdown-menu dropdown-menu-lg-right dropdown-secondary\" aria-labelledby=\"navbarDropdownMenuLink-55\">\r\n                    <p>Benvenuto {AuthenticationService.getUserInfo()}</p>\r\n                    <Link  className=\"dropdown-item\" to=\"/logout\" >Logout</Link>\r\n            </div>\r\n\r\n        );\r\n    }else{\r\n        return(\r\n\r\n            <div className=\"dropdown-menu dropdown-menu-lg-right dropdown-secondary\" aria-labelledby=\"navbarDropdownMenuLink-55\">\r\n                    <Link  className=\"dropdown-item\" to=\"/login\" >Login</Link>\r\n                    <Link  className=\"dropdown-item\" to=\"/registrati\" >Registrati</Link>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport './FooterComponent.css';\r\n\r\n//Footer del progetto\r\nexport default class FooterComponent extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"FooterComponent\">\r\n                <Footer />\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"page-footer font-small stylish-color-dark pt-4\">\r\n\r\n            <div className=\"container text-center text-md-left\">\r\n\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-4 mx-auto\">\r\n\r\n                        <h5 className=\"font-weight-bold text-uppercase mt-3 mb-4\">Footer Content</h5>\r\n                        <p>Here you can use rows and columns to organize your footer content. Lorem ipsum dolor sit amet,\r\n                        consectetur\r\n          adipisicing elit.</p>\r\n\r\n                    </div>\r\n\r\n                    <hr className=\"clearfix w-100 d-md-none\" />\r\n\r\n                    <div className=\"col-md-2 mx-auto\">\r\n\r\n                        <h5 className=\"font-weight-bold text-uppercase mt-3 mb-4\">Links</h5>\r\n\r\n                        <ul className=\"list-unstyled\">\r\n                            <li>\r\n                                <a href=\"#!\">Link 1</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 2</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 3</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 4</a>\r\n                            </li>\r\n                        </ul>\r\n\r\n                    </div>\r\n\r\n                    <hr className=\"clearfix w-100 d-md-none\" />\r\n\r\n                    <div className=\"col-md-2 mx-auto\">\r\n\r\n                        <h5 className=\"font-weight-bold text-uppercase mt-3 mb-4\">Links</h5>\r\n\r\n                        <ul className=\"list-unstyled\">\r\n                            <li>\r\n                                <a href=\"#!\">Link 1</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 2</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 3</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 4</a>\r\n                            </li>\r\n                        </ul>\r\n\r\n                    </div>\r\n\r\n                    <hr className=\"clearfix w-100 d-md-none\" />\r\n\r\n                    <div className=\"col-md-2 mx-auto\">\r\n\r\n                        <h5 className=\"font-weight-bold text-uppercase mt-3 mb-4\">Links</h5>\r\n\r\n                        <ul className=\"list-unstyled\">\r\n                            <li>\r\n                                <a href=\"#!\">Link 1</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 2</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 3</a>\r\n                            </li>\r\n                            <li>\r\n                                <a href=\"#!\">Link 4</a>\r\n                            </li>\r\n                        </ul>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <ul className=\"list-unstyled list-inline text-center py-2\">\r\n                <li className=\"list-inline-item\">\r\n                    <h5 className=\"mb-1\">Register for free</h5>\r\n                </li>\r\n                <li className=\"list-inline-item\">\r\n                    <a href=\"#!\" className=\"btn btn-danger btn-rounded\">Sign up!</a>\r\n                </li>\r\n            </ul>\r\n\r\n            <hr />\r\n\r\n            <ul className=\"list-unstyled list-inline text-center\">\r\n                <li className=\"list-inline-item\">\r\n                    <a className=\"btn-floating btn-fb mx-1\">\r\n                        <i className=\"fa fa-facebook-f\"> </i>\r\n                    </a>\r\n                </li>\r\n                <li className=\"list-inline-item\">\r\n                    <a className=\"btn-floating btn-tw mx-1\">\r\n                        <i className=\"fa fa-twitter\"> </i>\r\n                    </a>\r\n                </li>\r\n                <li className=\"list-inline-item\">\r\n                    <a className=\"btn-floating btn-dribbble mx-1\">\r\n                        <i className=\"fa fa-dribbble\"> </i>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n\r\n            <div className=\"footer-copyright text-center py-3\">© 2020 Copyright:\r\n    <a href=\"https://mdbootstrap.com/\"> MDBootstrap.com</a>\r\n            </div>\r\n\r\n        </footer>\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport './ForbComponent.css'\r\n\r\n//Questa è la classe per la pagina forbidden che viene chiamata quando si cerca di accedere ad una pagina che richiede un ruolo che l'utente non possiede\r\nexport default class ForbComponent extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"gandalf\">\r\n                    <div className=\"fireball\"></div>\r\n                    <div className=\"skirt\"></div>\r\n                    <div className=\"sleeves\"></div>\r\n                    <div className=\"shoulders\">\r\n                        <div className=\"hand left\"></div>\r\n                        <div className=\"hand right\"></div>\r\n                    </div>\r\n                    <div className=\"head\">\r\n                        <div className=\"hair\"></div>\r\n                        <div className=\"beard\"></div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"message\">\r\n                    <h1>403 - You Shall Not Pass</h1>\r\n                    <p>Uh oh, Gandalf is blocking the way!<br />Maybe you have a typo in the url? Or you meant to go to a different location? Like...Hobbiton?</p>\r\n                </div>\r\n                <Link className=\"btn btn-danger\" to=\"/login\">Login</Link>\r\n                <Link className=\"btn btn-info\" to=\"/clienti\">Clienti</Link>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\r\nimport LoginComponent from './Login/LoginComponent'\r\nimport LogoutComponent from './Logout/LogoutComponent'\r\nimport SignupComponent from './Signup/SignupComponent'\r\nimport WelcomeComponent from \"./Welcome/Welcome\"\r\nimport Clienti from \"./Clienti/Clienti\"\r\nimport Companies from \"./Companies/Companies\"\r\nimport DatiClienteComponent from \"./Clienti/InsClienti/DatiCliente\"\r\nimport CompanyDataComponent from \"./Companies/InsCompany/CompanyData\"\r\nimport HeaderComponent from \"./Header/HeaderComponent\"\r\nimport FooterComponent from \"./Footer/FooterComponent\"\r\nimport AuthRoute from \"./AuthRoute\";\r\nimport ForbComponent from \"./Forbidden/ForbComponent\"\r\n\r\n//Componente principale del progetto.\r\nexport default class GestFidApp extends Component {\r\n\r\n    //State pe salvare i diversi tipi di ruoli\r\n    state = {\r\n        Basic: \"ROLE_BASIC\",\r\n        Admin: 'ROLE_ADMIN',\r\n        Editor: 'ROLE_EDITOR'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            //Il router permette di attribuire un path ad una pagina e di limitarne l'accesso in base al ruolo\r\n            //In base alla posizione che voglio che abbiano, chiamo anche i componenti di header e di footer\r\n            <div className=\"GestFidApp\">\r\n                <Router>\r\n                    <HeaderComponent />\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={LoginComponent} />\r\n                        <Route path=\"/login\" component={LoginComponent} />\r\n                        <Route path=\"/logout\" component={LogoutComponent} />\r\n                        <Route path=\"/signup\" component={SignupComponent} />\r\n                        <AuthRoute path=\"/welcome/:userId\" component={WelcomeComponent} role={this.state.Basic} />\r\n                        <AuthRoute path=\"/inscliente/:codfid\" component={DatiClienteComponent} role={this.state.Admin} />\r\n                        <AuthRoute path=\"/clienti\" component={Clienti} role={this.state.Basic} />\r\n\r\n                        {/* COMPANIES ROUTES */}\r\n                        <AuthRoute path=\"/companies\" component={Companies} role={this.state.Basic} />\r\n                        <AuthRoute path=\"/inscompany/:id\" component={CompanyDataComponent} role={this.state.Admin} />\r\n\r\n                        <Route path=\"/forbidden\" component={ForbComponent} />\r\n\r\n                        <Route exact path=\"/404\" component={NotFound} />\r\n                        <Route component={NotFound} />\r\n                    </Switch>\r\n                    <FooterComponent />\r\n                </Router>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst NotFound = () => {\r\n    return <h1>I am Lost</h1>;\r\n};\r\nconst Unauthorized = () => {\r\n    return <h1>I can't do that</h1>;\r\n};\r\n\r\nfunction ErrorComponent() {\r\n    return <div>Errore. Pagina non trovata!</div>\r\n}\r\n\r\nfunction NotFoundPage() {\r\n    return <div>Errore. Pagina non trovata!</div>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport GestFidApp from './Componenti/GestFid/GestFidApp';\r\n\r\n//Funzione essenziale che carica il componente principale GestFidApp\r\nfunction App() {\r\n    return (\r\n\r\n        <div className = \"App\" >\r\n\r\n            <GestFidApp></GestFidApp>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/js/bootstrap.js';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'mdbreact/dist/css/mdb.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as Constants from \"./Componenti/GestFid/constants\";\r\nimport AuthenticationService from \"./Componenti/GestFid/Services/authService\"\r\n\r\n\r\n//Questa è la base assoluto della parte frontend del progetto.\r\n//Viene renderizzato nell'elemento root (creato in index.html in public) il contenuto della funziona App.js\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n\r\n  //Controllo se l'utente è loggato e vuole essere ricordato, altrimenti elimino i cookie\r\n  AuthenticationService.firstCheckIsLogged()\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}